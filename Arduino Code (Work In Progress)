#include <TimerOne.h>
#include <Wire.h>
#include <Adafruit_INA260.h>
extern "C" { 
#include "utility/twi.h"  // from Wire library, so we can do bus scanning
}
 
#define TCAADDR 0x70

 void displaySensorDetails(Adafruit_HMC5883_Unified *mag)
{
  sensor_t sensor;
  mag->getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" uT");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" uT");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" uT");  
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}

void tcaselect(uint8_t i) {
  if (i > 7) return;
 
  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();  
}
 
Adafruit_INA260 ina260A = Adafruit_INA260(1);
Adafruit_INA260 ina260B = Adafruit_INA260(2);


     float   Isupply;
     float   Iinverter;
     float   Ipanel = 0;
     float   Iconverter;
     float   Ibattery;
     float   Icharger;
     float   Vsupply;
     float   Vinverter;
     float   Vpanel = 0;
     float   Vconverter;
     float   Vcharger;
     float   Vbattery;
     float   Vref = 24;
     int     LoadShare = 1;
     float   Dconverter;
     float   Idesired;
     float   Vdesired;
     bool    On = true;
     int     ledPin = 9;

void setup() {
  // put your setup code here, to run once:
  int ledPin = 9;
  float   Vbattery = 0;
  Timer1.initialize(100);
  Timer1.pwm(ledPin, 512);
  pinMode(ledPin, OUTPUT);  // sets the pin as output
    Serial.begin(9600);
  // Wait until serial port is opened
  while (!Serial) { delay(10); }
 
  Serial.println("Adafruit INA260 Test");
 

    /* Initialise the 1st sensor */
  tcaselect(2);
  if(!ina260A.begin())
  {
    /* There was a problem detecting the HMC5883 ... check your connections */
    Serial.println("Ooops, no Sensor detected ... Check your wiring!");
    while(1);
  }
  Serial.println("Found INA260 chip");
  
  /* Initialise the 2nd sensor */
  tcaselect(6);
  if(!ina260B.begin()))
  {
    /* There was a problem detecting the HMC5883 ... check your connections */
    Serial.println("Ooops, no Sensor detected ... Check your wiring!");
    while(1);
  }
  Serial.println("Found INA260 chip");
  
    /* Display some basic information on this sensor */
  tcaselect(2);
  displaySensorDetails(&ina260A);
  tcaselect(6);
  displaySensorDetails(&ina260B);
}

void loop() {
  // put your main code here, to run repeatedly:

  /* Get a new sensor event */ 
  sensors_event_t event; 
  
  ina260A.getEvent(&event);

  delay(10);
  
  Serial.print("Current: ");
  Ibattery = ina260A.readCurrent();
  Serial.print(Ibattry);
  Serial.println(" mA");
 
  Serial.print("Bus Voltage: ");
  Vbattery = (ina260A.readBusVoltage()/10);
  Serial.print(Vbattery);
  Serial.println(" mV/10");
 
  Serial.print("Power: ");
  Serial.print((ina260A.readBusVoltage()*ina260A.readCurrent())/1000);
  Serial.println(" mW");
 
  Serial.println();


  ina260B.getEvent(&event);

  Serial.print("Current: ");
  Iconverter = ina260B.readCurrent();
  Serial.print(Iconverter);
  Serial.println(" mA");
 
  Serial.print("Bus Voltage: ");
  Vconverter = (ina260B.readBusVoltage()/10);
  Serial.print(Vconverter);
  Serial.println(" mV/10");
 
  Serial.print("Power: ");
  Serial.print((ina260B.readBusVoltage()*ina260B.readCurrent())/1000);
  Serial.println(" mW");
 
  Serial.println();

  
  delay(1000);

    if (Vbattery >= 11)                                             //First check, check for maximum power storage
    {                                                               //If the battery is fully charged, the battery
        LoadShare = 100;                                            //Will hold the entire load, which is sustainable
    }                                                               //As long as the solar panel is distributing excess power
    else
        if (Vbattery >= 11 && Vbattery < 12)                        //Once there is no more excess of energy and we start
        {                                                           //to actually tap into the stored energy in the battery
            LoadShare = 75;                                         //Loadhare will then go from 100% to 75%
        }
        else
            if (Vbattery < 11 && Vbattery >= 8)                     //Once the battery is drained to between 90%
            {                                                       //and 70% the Loadshare percentage will be lowered to 50%
                LoadShare = 50;
            }
            else
                if (Vbattery >= 6 && Vbattery < 8)                     //Once the battery is drained to between 70%
                {                                                      //and 50% the Loadshare percentage will be lowered to 35%
                    LoadShare = 35;
                }
                else
                    if (Vbattery > 4 && Vbattery < 6)                  //Once the battery is drained to between 50%
                    {                                                  //and 33% the Loadshare percentage will be lowered to 25%
                        LoadShare = 25;
                    }
                    else
                        if (Vbattery <= 4)                             //Once the battery is drained to 33% or lower then
                        {                                              //the Loadshare percentage will become 0% and the
                            LoadShare = 1;                             //grid will take the entire load
                        }
                        else
                            LoadShare = 1;                             //In the case where the algorithm gets lost for some reason
                                                                       //the grid will take over the load AKA when in doubt
                                                                       //have the grid take over the load.

    


    /* Gives Duty Cycle of the converter based on loadshare value and Voltage needed to achieve that loadshare. */
    //
    // DC-DC CONVERTER IS NO LONGER CONTROLLED SIMPLY BY DUTY CYCLE, CODE BELOW WILL CHANGE
    // TO MATCH BLOCK DIAGRAM AS MENTIONED IN THE FINAL PRESENTATION AND FINAL REPORT
    //
    //Vout = Vin/(1-duty cycle)
    // Then,
    //duty cycle = 1 - (Vin/Vout)
    //Therefore, by setting Iout = (Loadshare %) * Iload, we get the desired current pulled from the battery
    //Assuming 0 < Duty cycle < 1
    //Below calculates the duty cycle in this way..  

    

    switch(LoadShare)
    {
    case 100:
        Vdesired = 28;
        break;
    case 75:
        Vdesired = 26;
        break;
    case 50:
        Vdesired = 24;
        break;
    case 35:
        Vdesired = 23;
        break;
    case 25:
        Vdesired = 22;
        break;
    case 1:
        Vdesired = 0;
        break;
    default:
        Vdesired = 0;
        break;
    }

    Vconverter = Vdesired;                                                           // FOR TESTING Just make V converter the desired voltage
                                                                                     // Test controls later


    float Dtest = (1-(Vbattery/Vdesired));

    if((Dtest > 0) && (Dtest < 1))               // Confirm 0 < Duty cycle < 1
    {
        Dconverter = Dtest;                                         // Set duty cycle
    }
    else
    {
        Dconverter = 0.01;
    }



    // If current is impossible to pull
    // let the grid handle it.
    analogWrite(ledPin, 512 * Dconverter); // Set PWM based on Dconverter

    delay(1000);

    // FEEDBACK CONTROLS:
    // Check feedback from the inverter and push current to match the inverter current

    int a;
    for(a = 0; a < 9; a++)
    {
        delay(1000);
        if(Vconverter != Vdesired)
        {

                    if (Vconverter > Vdesired)
                    {
                        Dconverter = Dconverter - 0.025;
                    }
                    else
                    {
                        Dconverter = Dconverter + 0.025;
                    }

                    if (Vconverter < Vdesired)
                    {
                        Dconverter = Dconverter + 0.025;
                    }
                    else
                    {
                        Dconverter = Dconverter - 0.025;
                    }

        }

        // During a fault in the power system
        if (Isupply == 0)
        {
            if (Vbattery >= 6)
            {
                Dconverter = 0.99;
            }
            else
                Dconverter = 0.01;
        }



        analogWrite(ledPin, 255 * Dconverter); // Set PWM based on Dconverter


        // Add pressbutton to turn off code (On=false)
}
    
